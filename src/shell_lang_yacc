
A <newline> shall be returned as the token identifier NEWLINE.

If the token is an operator, the token identifier for that operator shall result.

If the string consists solely of digits and the delimiter character is one of
'<' or '>', the token identifier IO_NUMBER shall be returned.

Otherwise, the token identifier TOKEN_NOT_APPLICABLE results.

/* -------------------------------------------------------
   The grammar symbols
   ------------------------------------------------------- */
%token  WORD
%token  ASSIGNMENT_WORD
%token  NAME
%token  NEWLINE
%token  IO_NUMBER

/* The following are the operators (see XBD Operator)
   containing more than one character. */

%token  AND_IF    OR_IF    DSEMI
/*      '&&'      '||'     ';;'    */
%token  DLESS  DGREAT  LESSAND  GREATAND  LESSGREAT  DLESSDASH
/*      '<<'   '>>'    '<&'     '>&'      '<>'       '<<-'   */
%token  CLOBBER
/*      '>|'   */

/* The following are the reserved words. */

%token  If    Then    Else    Elif    Fi    Do    Done
/*      'if'  'then'  'else'  'elif'  'fi'  'do'  'done'   */
%token  Case    Esac    While    Until    For
/*      'case'  'esac'  'while'  'until'  'for'   */

/* These are reserved words, not operator tokens, and are
   recognized when reserved words are recognized. */

%token  Lbrace    Rbrace    Bang
/*      '{'       '}'       '!'   */
%token  In
/*      'in'   */


/* -------------------------------------------------------
   The Grammar
   ------------------------------------------------------- */
%start program
%%
program          : linebreak complete_commands linebreak
                 | linebreak
                 ;


complete_commands: complete_commands newline_list complete_command
                 |                                complete_command
                 ;
complete_commands_alt : complete_command complete_commands_dash
                 ;

complete_commands_dash: newline_list complete_command complete_commands_dash
                 | <empty>
                 ;




complete_command : list separator_op
                 | list
                 ;



list             : list separator_op and_or
                 |                   and_or
                 ;
list_alt         : and_or list_dash
                 ;

list_dash        : separator_op and_or list_dash
                 | <empty>
                 ;




and_or           :                         pipeline
                 | and_or AND_IF linebreak pipeline
                 | and_or OR_IF  linebreak pipeline
                 ;
and_or_alt       : pipeline and_or_dash
                 ;

and_or_dash      : AND_IF linebreak and_or_dash
                 | OR_IF  linebreak and_or_dash
                 | <empty>
                 ;




pipeline         :      pipe_sequence
                 | Bang pipe_sequence
                 ;
pipe_sequence    :                             command
                 | pipe_sequence '|' linebreak command
                 ;
pipe_sequence_alt:                command pipe_sequence_dash
                 ;

pipe_sequence_dash: '|' linebreak command pipe_sequence_dash
                 | <empty>
                 ;




command          : simple_command
                 | compound_command
                 | compound_command redirect_list
                 | function_definition
                 ;
compound_command : brace_group
                 | subshell
                 | for_clause
                 | case_clause
                 | if_clause
                 | while_clause
                 | until_clause
                 ;
subshell         : '(' compound_list ')'
                 ;
compound_list    : linebreak term
                 | linebreak term separator
                 ;


term             : term separator and_or
                 |                and_or
                 ;
term_alt         : and_or term_dash
                 ;
term_dash        : separator and_or term_dash
                 | <empty>
                 ;



for_clause       : For name                                      do_group
                 | For name                       sequential_sep do_group
                 | For name linebreak in          sequential_sep do_group
                 | For name linebreak in wordlist sequential_sep do_group
                 ;
name             : NAME                     /* Apply rule 5 */
                 ;
in               : In                       /* Apply rule 6 */
                 ;



wordlist         : wordlist WORD
                 |          WORD
                 ;
wordlist_alt     : WORD wordlist_dash
                 ;
wordlist_dash    : WORD wordlist_dash
                 | <empty>
                 ;



if_clause        : If compound_list Then compound_list else_part Fi
                 | If compound_list Then compound_list           Fi
                 ;
else_part        : Elif compound_list Then compound_list
                 | Elif compound_list Then compound_list else_part
                 | Else compound_list
                 ;
while_clause     : While compound_list do_group
                 ;
until_clause     : Until compound_list do_group
                 ;
function_definition : fname '(' ')' linebreak function_body
                 ;
function_body    : compound_command                /* Apply rule 9 */
                 | compound_command redirect_list  /* Apply rule 9 */
                 ;
fname            : NAME                            /* Apply rule 8 */
                 ;
brace_group      : Lbrace compound_list Rbrace
                 ;
do_group         : Do compound_list Done           /* Apply rule 6 */
                 ;
simple_command   : cmd_prefix cmd_word cmd_suffix
                 | cmd_prefix cmd_word
                 | cmd_prefix
                 | cmd_name cmd_suffix
                 | cmd_name
                 ;
cmd_name         : WORD                   /* Apply rule 7a */
                 ;
cmd_word         : WORD                   /* Apply rule 7b */
                 ;



cmd_prefix       :            io_redirect
                 |            ASSIGNMENT_WORD
                 | cmd_prefix io_redirect
                 | cmd_prefix ASSIGNMENT_WORD
                 ;
cmd_prefix_alt   : io_redirect     cmd_prefix_dash
                 | ASSIGNMENT_WORD cmd_prefix_dash
                 ;
cmd_prefix_dash  : io_redirect     cmd_prefix_dash
                 | ASSIGNMENT_WORD cmd_prefix_dash
                 | <empty>
                 ;

cmd_suffix       :            io_redirect
                 |            WORD
                 | cmd_suffix io_redirect
                 | cmd_suffix WORD
                 ;

cmd_suffix_alt   : io_redirect cmd_suffix_dash
                 | WORD        cmd_suffix_dash
                 ;

cmd_suffix_dash  : io_redirect cmd_suffix_dash
                 | WORD        cmd_suffix_dash
                 | <empty>
                 ;

redirect_list    : io_redirect
                 | redirect_list io_redirect
                 ;

redirect_list_alt: io_redirect redirect_list_dash
                 ;

redirect_list_dash: io_redirect redirect_list_dash
                 | <empty>
                 ;

io_redirect      :           io_file
                 | IO_NUMBER io_file
                 |           io_here
                 | IO_NUMBER io_here
                 ;
io_file          : '<'       filename
                 | LESSAND   filename
                 | '>'       filename
                 | GREATAND  filename
                 | DGREAT    filename
                 | LESSGREAT filename
                 | CLOBBER   filename
                 ;
filename         : WORD                      /* Apply rule 2 */
                 ;
io_here          : DLESS     here_end
                 | DLESSDASH here_end
                 ;
here_end         : WORD                      /* Apply rule 3 */
                 ;
newline_list     :              NEWLINE
                 | newline_list NEWLINE
                 ;

newline_list_alt : NEWLINE newline_list_dash
                 ;

newline_list_dash: NEWLINE newline_list_dash
                 | <empty>
                 ;

linebreak        : newline_list
                 | /* empty */
                 ;
separator_op     : '&'
                 | ';'
                 ;
separator        : separator_op linebreak
                 | newline_list
                 ;
sequential_sep   : ';' linebreak
                 | newline_list
                 ;